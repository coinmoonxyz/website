{"version":3,"sources":["webpack://website/./src/templates/tag.js"],"names":["pageContext","data","location","siteTitle","site","siteMetadata","title","tag","allMarkdownRemark","edges","tagHeader","totalCount","description","to","map","node","frontmatter","slug","fields","key"],"mappings":"kKAgEA,UAxDa,SAAC,GAAqC,IAAD,EAAlCA,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAQP,EAARO,IACR,EAA8BN,EAAKO,kBAA3BC,EAAR,EAAQA,MACFC,EAAS,IAAOH,EAAP,SADf,EAAeI,WACA,cAEf,OACE,SAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,IACjC,SAAC,IAAD,CAAKG,MAAOC,EAAKK,YAAgBL,EAAL,YAE5B,mBAAKG,IACL,mBACE,SAAC,KAAD,CAAMG,GAAG,KAAT,kBAEF,SAAC,KAAD,CAAMA,GAAG,SAAT,aAEA,mBACGJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,EAA+BA,EAAKC,YAA5BV,EAAR,EAAQA,MAAOM,EAAf,EAAeA,YACTK,EAAOF,EAAKG,OAAOD,KACzB,OACE,eAAIE,IAAKF,IACP,SAAC,KAAD,CAAMJ,GAAII,GACPX,EADH,MACaM","file":"component---src-templates-tag-js-8ca5d5c07767ec187ac6.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `“${tag}” 태그로 ${totalCount}건이 검색되었습니다.`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={tag} description={`${tag} 검색 결과`} />\n\n      <h1>{tagHeader}</h1>\n      <p>\n        <Link to=\"/\">메인 페이지로 돌아가기</Link>\n      </p>\n      <Link to=\"/tags\">모든 태그 보기</Link>\n\n      <ul>\n        {edges.map(({ node }) => {\n          const { title, description } = node.frontmatter\n          const slug = node.fields.slug\n          return (\n            <li key={slug}>\n              <Link to={slug}>\n                {title} - {description}\n              </Link>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}