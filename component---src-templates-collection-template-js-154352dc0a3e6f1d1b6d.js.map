{"version":3,"sources":["webpack://website/./src/components/atoms/divider.js","webpack://website/./src/components/organisms/post-list-item.js","webpack://website/./src/templates/collection-template.js"],"names":["Divider","theme","spacing","colors","accent","Article","props","brightgray","text","fontSizes","fontWeights","regular","black","post","title","frontmatter","tags","sort","key","fields","slug","itemScope","itemType","to","itemProp","description","excerpt","date","Grid","widths","main","aside","full","Wrapper","PostList","data","location","siteTitle","site","siteMetadata","allCollectionsYaml","edges","node","subtitle","urls","map","url","allMdx","nodes","filter","id"],"mappings":"2GAEMA,GAAO,E,QAAA,wCACD,qBAAGC,MAAkBC,QAAQ,KAD5B,kBAEG,qBAAGD,MAAkBE,OAAOC,SAF/B,yBAOb,O,4ECJMC,GAAO,yDACM,SAAAC,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KADnC,mBAIM,qBAAGD,MAAkBC,QAAQ,KAJnC,gBAMG,qBAAGD,MAAkBE,OAAOI,aAN/B,yJAiBA,qBAAGN,MAAkBE,OAAOK,OAjB5B,qBAsBE,qBAAGP,MAAkBC,QAAQ,KAtB/B,KAuBL,qBAAGD,MAAkBC,QAAQ,KAvBxB,uBA2BQ,SAAAI,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KA3BrC,gBA4BK,SAAAI,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KA5BlC,eA6BI,SAAAI,GAAK,OAAIA,EAAML,MAAMQ,UAAU,KA7BnC,iBA8BM,SAAAH,GAAK,OAAIA,EAAML,MAAMS,YAAYC,UA9BvC,WA+BA,SAAAL,GAAK,OAAIA,EAAML,MAAME,OAAOS,QA/B5B,eAmCC,SAAAN,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KAnC9B,MA+Db,IAxBqB,SAAC,GAAc,IAAZW,EAAW,EAAXA,KAChBC,EAAQD,EAAKE,YAAYD,MACzBE,EAAOH,EAAKE,YAAYC,KAG9B,OAFIA,GAAMA,EAAKC,QAGb,eAAIC,IAAKL,EAAKM,OAAOC,OACnB,SAACf,EAAD,CAASgB,WAAS,EAACC,SAAS,8BAC1B,SAAC,KAAD,CAAMC,GAAIV,EAAKM,OAAOC,KAAMI,SAAS,QACnC,wBACE,oBACE,iBAAMA,SAAS,YAAYV,KAE7B,cAAGU,SAAS,eACTX,EAAKE,YAAYU,aAAeZ,EAAKa,SAEvCb,EAAKE,YAAYY,OAAQ,sBAAQd,EAAKE,YAAYY,Y,2HC9C/D,IAAMC,GAAI,mDACO,SAAAtB,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KADpC,gDAIyB,qBAAGD,MAAkB4B,OAAOC,OAJrD,YAIoE,qBACxE7B,MACU4B,OAAOE,QANb,8CAYa,qBAAG9B,MAAkB4B,OAAOG,OAZzC,oCAa2B,qBAAG/B,MAAkB4B,OAAOC,OAbvD,iBAgBJG,GAAO,iDACE,SAAA3B,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KAD/B,sBAQPgC,GAAQ,4EAmCd,UA/B2B,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC5BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBzB,QAAxB,QAClB,EAA+CqB,EAAKK,mBAAmBC,MAAM,GAAGC,KAAxE5B,EAAR,EAAQA,MAAO6B,EAAf,EAAeA,SAAUlB,EAAzB,EAAyBA,YAAamB,EAAtC,EAAsCA,KAEtC,OACE,SAAC,IAAD,CAAQR,SAAUA,EAAUtB,MAAOuB,IACjC,SAAC,IAAD,CAAKvB,MAAOA,EAAOW,YAAakB,KAEhC,SAACf,EAAD,MACE,SAACK,EAAD,MACE,mBAAKnB,EAAL,UACA,kBAAIW,IACJ,mBACE,SAAC,KAAD,CAAMF,GAAG,KAAT,kBAEF,SAAC,IAAD,OACA,SAACW,EAAD,KACGU,EAAKC,KAAI,SAAAC,GACR,IAAMjC,EAAOsB,EAAKY,OAAOC,MAAMC,QAC7B,qBAAG9B,OAAUC,OAAsB0B,KACnC,GAEF,OAAO,SAAC,IAAD,CAAcjC,KAAMA,EAAMK,IAAKL,EAAKqC","file":"component---src-templates-collection-template-js-154352dc0a3e6f1d1b6d.js","sourcesContent":["import styled from \"@emotion/styled\"\n\nconst Divider = styled.hr`\n  margin: ${({ theme }) => theme.spacing[7]} 0;\n  background: ${({ theme }) => theme.colors.accent};\n  height: 1px;\n  border: 0;\n`\n\nexport default Divider\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"@emotion/styled\"\n// import { css } from \"@emotion/react\"\n\nconst Article = styled.article`\n  margin-bottom: ${props => props.theme.spacing[5]};\n\n  /* border: 1px solid ${({ theme }) => theme.colors.accent}; */\n  border-radius: ${({ theme }) => theme.spacing[3]};\n\n  background: ${({ theme }) => theme.colors.brightgray};\n\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.4s;\n\n  &:hover {\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  }\n\n  a {\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.text};\n  }\n\n  header {\n    /* margin-bottom: ${props => props.theme.spacing[4]}; */\n    padding: ${({ theme }) => theme.spacing[6]}\n      ${({ theme }) => theme.spacing[7]};\n  }\n\n  h2 {\n    margin-bottom: ${props => props.theme.spacing[1]};\n    margin-top: ${props => props.theme.spacing[0]};\n    font-size: ${props => props.theme.fontSizes[3]};\n    font-weight: ${props => props.theme.fontWeights.regular};\n    color: ${props => props.theme.colors.black};\n  }\n\n  p {\n    margin: ${props => props.theme.spacing[0]};\n  }\n`\n\nconst PostListItem = ({ post }) => {\n  const title = post.frontmatter.title\n  const tags = post.frontmatter.tags\n  if (tags) tags.sort()\n\n  return (\n    <li key={post.fields.slug}>\n      <Article itemScope itemType=\"http://schema.org/Article\">\n        <Link to={post.fields.slug} itemProp=\"url\">\n          <header>\n            <h2>\n              <span itemProp=\"headline\">{title}</span>\n            </h2>\n            <p itemProp=\"description\">\n              {post.frontmatter.description || post.excerpt}\n            </p>\n            {post.frontmatter.date && <small>{post.frontmatter.date}</small>}\n          </header>\n        </Link>\n      </Article>\n    </li>\n  )\n}\n\nexport default PostListItem\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostListItem from \"../components/organisms/post-list-item\"\nimport Divider from \"../components/atoms/divider\"\nimport styled from \"@emotion/styled\"\n\n/**\n * filter by collection urls to get the post data I need.\n * the current method may be too slow as it has to compare the whole MDX array.\n * if there's a way to filter within GraphQL query, that might be better in the future.\n */\n\nconst Grid = styled.div`\n  padding-top: ${props => props.theme.spacing[5]};\n\n  display: grid;\n  grid-template-columns: 1fr min(${({ theme }) => theme.widths.main}, 100%) ${({\n      theme,\n    }) => theme.widths.aside} 1fr;\n\n  > * {\n    grid-column: 2;\n  }\n\n  @media (max-width: ${({ theme }) => theme.widths.full}) {\n    grid-template-columns: 1fr min(${({ theme }) => theme.widths.main}, 100%) 1fr;\n  }\n`\nconst Wrapper = styled.div`\n  padding: 0 ${props => props.theme.spacing[5]};\n\n  h1 {\n    margin-top: 0;\n  }\n`\n\nconst PostList = styled.ol`\n  list-style: none;\n`\n\nconst CollectionTemplate = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { title, subtitle, description, urls } = data.allCollectionsYaml.edges[0].node\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={title} description={subtitle} />\n\n      <Grid>\n        <Wrapper>\n          <h1>{title} 글 모음</h1>\n          <p>{description}</p>\n          <p>\n            <Link to=\"/\">메인 페이지로 돌아가기</Link>\n          </p>\n          <Divider />\n          <PostList>\n            {urls.map(url => {\n              const post = data.allMdx.nodes.filter(\n                ({ fields: { slug } }) => slug === url\n              )[0]\n\n              return <PostListItem post={post} key={post.id} />\n            })}\n          </PostList>\n        </Wrapper>\n      </Grid>\n    </Layout>\n  )\n}\n\nexport default CollectionTemplate\n\nexport const pageQuery = graphql`\n  query($slug: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n\n    allCollectionsYaml(filter: { slug: { eq: $slug } }) {\n      edges {\n        node {\n          title\n          subtitle\n          description\n          urls\n        }\n      }\n    }\n\n    allMdx(sort: { fields: [frontmatter___date], order: ASC }, limit: 1000) {\n      nodes {\n        frontmatter {\n          title\n          description\n        }\n        id\n        excerpt\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}