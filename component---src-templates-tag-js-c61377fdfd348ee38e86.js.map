{"version":3,"sources":["webpack://gatsby-starter-blog/./src/templates/tag.js"],"names":["pageContext","data","location","siteTitle","site","siteMetadata","title","tag","allMarkdownRemark","edges","tagHeader","totalCount","description","Link","to","map","node","frontmatter","slug","key"],"mappings":"kLA4DA,UApDa,SAAC,GAAqC,IAAD,EAAlCA,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAQP,EAARO,IAFwC,EAGlBN,EAAKO,kBAA3BC,EAHwC,EAGxCA,MACFC,EAAS,IAAOH,EAAP,SAJiC,EAGjCI,WACA,cAEf,OACE,gBAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAOC,EAAKK,YAAgBL,EAAL,WAE5B,0BAAKG,GACL,yBAAG,gBAAC,EAAAG,KAAD,CAAMC,GAAG,KAAT,iBACH,gBAAC,EAAAD,KAAD,CAAMC,GAAG,SAAT,YAEA,0BACGL,EAAMM,KAAI,YAAe,IAAD,IAAXC,KAC8BC,YAAlCX,EADe,EACfA,MAAOM,EADQ,EACRA,YAAaM,EADL,EACKA,KAC5B,OACE,sBAAIC,IAAKD,GACP,gBAAC,EAAAL,KAAD,CAAMC,GAAII,GAAOZ,EAAjB,MAA2BM","file":"component---src-templates-tag-js-c61377fdfd348ee38e86.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `“${tag}” 태그로 ${totalCount}건이 검색되었습니다.`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={tag} description={`${tag} 검색 결과`} />\n\n      <h1>{tagHeader}</h1>\n      <p><Link to=\"/\">메인 페이지로 돌아가기</Link></p>\n      <Link to=\"/tags\">모든 태그 보기</Link>\n\n      <ul>\n        {edges.map(({ node }) => {\n          const { title, description, slug } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title} - {description}</Link>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              slug: PropTypes.string.isRequired,\n            }),\n            // fields: PropTypes.shape({\n            // slug: PropTypes.string.isRequired,\n            // }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}