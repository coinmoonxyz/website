{"version":3,"sources":["webpack://website/./src/components/organisms/post-list-item.js","webpack://website/./src/templates/tag.js"],"names":["Article","props","theme","spacing","fontSizes","fontWeights","regular","colors","black","post","title","frontmatter","tags","sort","key","fields","slug","itemScope","itemType","fontSize","to","itemProp","description","excerpt","date","PostList","pageContext","data","location","siteTitle","site","siteMetadata","tag","allMarkdownRemark","edges","tagHeader","totalCount","map","node"],"mappings":"2JAKMA,GAAO,yDACM,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KADnC,gBAEG,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAFhC,0BAKQ,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KALrC,uBASQ,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KATrC,gBAUK,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAVlC,eAWI,SAAAF,GAAK,OAAIA,EAAMC,MAAME,UAAU,KAXnC,iBAYM,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,YAAYC,UAZvC,WAaA,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,OAAOC,QAb5B,eAiBC,SAAAP,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAjB9B,MA8Cb,IAzBqB,SAAC,GAAc,IAAZM,EAAW,EAAXA,KAChBC,EAAQD,EAAKE,YAAYD,MACzBE,EAAOH,EAAKE,YAAYC,KAG9B,OAFIA,GAAMA,EAAKC,QAGb,eAAIC,IAAKL,EAAKM,OAAOC,OACnB,SAAChB,EAAD,CAASiB,WAAS,EAACC,SAAS,8BAC1B,uBACGN,IAAQ,SAAC,IAAD,CAASA,KAAMA,EAAMO,SAAU,KACxC,oBACE,SAAC,KAAD,CAAMC,GAAIX,EAAKM,OAAOC,KAAMK,SAAS,QACnC,iBAAMA,SAAS,YAAYX,MAG/B,cAAGW,SAAS,eACTZ,EAAKE,YAAYW,aAAeb,EAAKc,UAExC,sBAAQd,EAAKE,YAAYa,W,iHCpCnC,IAAMC,GAAQ,2EAoDd,UAhDa,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBrB,QAAxB,QACVsB,EAAQN,EAARM,IACR,EAA8BL,EAAKM,kBAA3BC,EAAR,EAAQA,MACFC,EAAS,IAAOH,EAAP,SADf,EAAeI,WACA,cAEf,OACE,SAAC,IAAD,CAAQR,SAAUA,EAAUlB,MAAOmB,IACjC,SAAC,IAAD,CAAKnB,MAAOsB,EAAKV,YAAgBU,EAAL,YAE5B,mBAAKG,IACL,mBACE,SAAC,KAAD,CAAMf,GAAG,KAAT,kBAEF,SAAC,KAAD,CAAMA,GAAG,SAAT,aAEA,SAACK,EAAD,KACGS,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OAAO,SAAC,IAAD,CAAc7B,KAAM6B","file":"component---src-templates-tag-js-08421e49f753129e2de7.js","sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport TagList from \"./tag-list\"\nimport styled from \"@emotion/styled\"\n\nconst Article = styled.article`\n  margin-bottom: ${props => props.theme.spacing[7]};\n  margin-top: ${props => props.theme.spacing[7]};\n\n  header {\n    margin-bottom: ${props => props.theme.spacing[4]};\n  }\n\n  h2 {\n    margin-bottom: ${props => props.theme.spacing[2]};\n    margin-top: ${props => props.theme.spacing[0]};\n    font-size: ${props => props.theme.fontSizes[4]};\n    font-weight: ${props => props.theme.fontWeights.regular};\n    color: ${props => props.theme.colors.black};\n  }\n\n  p {\n    margin: ${props => props.theme.spacing[0]};\n  }\n`\n\nconst PostListItem = ({ post }) => {\n  const title = post.frontmatter.title\n  const tags = post.frontmatter.tags\n  if (tags) tags.sort()\n\n  return (\n    <li key={post.fields.slug}>\n      <Article itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          {tags && <TagList tags={tags} fontSize={0} />}\n          <h2>\n            <Link to={post.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{title}</span>\n            </Link>\n          </h2>\n          <p itemProp=\"description\">\n            {post.frontmatter.description || post.excerpt}\n          </p>\n          <small>{post.frontmatter.date}</small>\n        </header>\n      </Article>\n    </li>\n  )\n}\n\nexport default PostListItem\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostListItem from \"../components/organisms/post-list-item\"\n\nconst PostList = styled.ol`\n  list-style: none;\n`\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `“${tag}” 태그로 ${totalCount}건이 검색되었습니다.`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={tag} description={`${tag} 검색 결과`} />\n\n      <h1>{tagHeader}</h1>\n      <p>\n        <Link to=\"/\">메인 페이지로 돌아가기</Link>\n      </p>\n      <Link to=\"/tags\">모든 태그 보기</Link>\n\n      <PostList>\n        {edges.map(({ node }) => {\n          return <PostListItem post={node} />\n        })}\n      </PostList>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            date(formatString: \"MMMM D, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}