{"version":3,"sources":["webpack://website/./src/components/atoms/round-box.js","webpack://website/./src/components/organisms/post-list-item.js","webpack://website/./src/pages/all-posts.js"],"names":["RoundBox","props","theme","spacing","bg","bgHover","colors","text","short","fontSizes","fontWeights","regular","black","post","title","frontmatter","tags","sort","itemScope","schema","to","fields","slug","itemProp","description","excerpt","date","Grid","widths","main","aside","full","Wrapper","PostList","data","location","siteTitle","site","siteMetadata","posts","allMdx","nodes","map","key","id"],"mappings":"2GAUMA,GAAQ,E,QAAA,iDACK,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KADlC,mBAEK,qBAAGD,MAAkBC,QAAQ,KAFlC,gBAIE,qBAAGC,KAJL,sJAUI,qBAAGC,UAVP,iDAgBD,qBAAGH,MAAkBI,OAAOC,OAhB3B,qBAoBC,gBAAGL,EAAH,EAAGA,MAAH,SAAUM,MAAoBN,EAAMC,QAAQ,GAAKD,EAAMC,QAAQ,KApBhE,KAoBsE,qBAAGD,MAAkBC,QAAQ,KApBnG,uBAwBO,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAxBpC,gBAyBI,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAzBjC,eA0BG,SAAAF,GAAK,OAAIA,EAAMC,MAAMO,UAAU,KA1BlC,iBA2BK,SAAAR,GAAK,OAAIA,EAAMC,MAAMQ,YAAYC,UA3BtC,WA4BD,SAAAV,GAAK,OAAIA,EAAMC,MAAMI,OAAOM,QA5B3B,eAgCA,SAAAX,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAhC7B,MAoCd,O,oFCbA,IA1BqB,SAAC,GAAc,IAAZU,EAAW,EAAXA,KAChBC,EAAQD,EAAKE,YAAYD,MACzBE,EAAOH,EAAKE,YAAYC,KAG9B,OAFIA,GAAMA,EAAKC,QAGb,oBACE,oBAASC,WAAS,EAACC,OAAO,+BACxB,SAAC,IAAD,CAAUf,GAAIF,wBACZ,SAAC,KAAD,CAAMkB,GAAIP,EAAKQ,OAAOC,KAAMC,SAAS,QACnC,wBACE,oBACE,iBAAMA,SAAS,YAAYT,KAE7B,cAAGS,SAAS,eACTV,EAAKE,YAAYS,aAAeX,EAAKY,SAEvCZ,EAAKE,YAAYW,OAAQ,sBAAQb,EAAKE,YAAYW,a,iHChBjE,IAAMC,GAAI,mDACO,SAAA1B,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KADpC,gDAIyB,qBAAGD,MAAkB0B,OAAOC,OAJrD,YAIoE,qBACxE3B,MACU0B,OAAOE,QANb,8CAYa,qBAAG5B,MAAkB0B,OAAOG,OAZzC,oCAa2B,qBAAG7B,MAAkB0B,OAAOC,OAbvD,iBAiBJG,GAAO,iDACE,SAAA/B,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,KAD/B,uCAQQ,qBAAGD,MAAkBC,QAAQ,KARrC,MAYP8B,GAAQ,4EA4Bd,UAxBiB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAClBC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBxB,QAAxB,QACZyB,EAAQL,EAAKM,OAAOC,MAE1B,OACE,SAAC,IAAD,CAAQN,SAAUA,EAAUrB,MAAOsB,IACjC,SAAC,IAAD,CAAKtB,MAAM,aACX,SAACa,EAAD,MACE,SAACK,EAAD,MACE,+BACA,mBACE,SAAC,KAAD,CAAMZ,GAAG,KAAT,kBAEF,SAACa,EAAD,KACGM,EAAMG,KAAI,SAAA7B,GAAI,OACb,SAAC,IAAD,CAAcA,KAAMA,EAAM8B,IAAK9B,EAAK+B","file":"component---src-pages-all-posts-js-62f212b8b20220a92fd2.js","sourcesContent":["import styled from \"@emotion/styled\"\n\n/**\n * generic box container.\n * used in\n * - post list item\n * - collection list item\n * - etc.\n */\n\nconst RoundBox = styled.div`\n  margin-bottom: ${props => props.theme.spacing[5]};\n  border-radius: ${({ theme }) => theme.spacing[3]};\n\n  background: ${({ bg }) => bg};\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.4s, background 0.3s;\n\n  &:hover {\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    background: ${({ bgHover }) => bgHover};\n  }\n\n  a {\n    display: block;\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.text};\n  }\n\n  header {\n    padding: ${({ theme, short }) => short ? theme.spacing[3] : theme.spacing[6]} ${({ theme }) => theme.spacing[7]};\n  }\n\n  h2 {\n    margin-bottom: ${props => props.theme.spacing[1]};\n    margin-top: ${props => props.theme.spacing[0]};\n    font-size: ${props => props.theme.fontSizes[3]};\n    font-weight: ${props => props.theme.fontWeights.regular};\n    color: ${props => props.theme.colors.black};\n  }\n\n  p {\n    margin: ${props => props.theme.spacing[0]};\n  }\n`\n\nexport default RoundBox\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n// import styled from \"@emotion/styled\"\n// import { css } from \"@emotion/react\"\nimport RoundBox from \"../atoms/round-box\"\nimport theme from \"../../styles/theme\"\n\nconst PostListItem = ({ post }) => {\n  const title = post.frontmatter.title\n  const tags = post.frontmatter.tags\n  if (tags) tags.sort()\n\n  return (\n    <li>\n      <article itemScope schema=\"https://schema.org/Article\">\n        <RoundBox bg={theme.colors.brightgray}>\n          <Link to={post.fields.slug} itemProp=\"url\">\n            <header>\n              <h2>\n                <span itemProp=\"headline\">{title}</span>\n              </h2>\n              <p itemProp=\"description\">\n                {post.frontmatter.description || post.excerpt}\n              </p>\n              {post.frontmatter.date && <small>{post.frontmatter.date}</small>}\n            </header>\n          </Link>\n        </RoundBox>\n      </article>\n    </li>\n  )\n}\n\nexport default PostListItem\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostListItem from \"../components/organisms/post-list-item\"\nimport styled from \"@emotion/styled\"\n// import RoundBox from '../components/atoms/round-box'\n\nconst Grid = styled.div`\n  padding-top: ${props => props.theme.spacing[5]};\n  \n  display: grid;\n  grid-template-columns: 1fr min(${({ theme }) => theme.widths.main}, 100%) ${({\n      theme,\n    }) => theme.widths.aside} 1fr;\n\n  > * {\n    grid-column: 2;\n  }\n\n  @media (max-width: ${({ theme }) => theme.widths.full}) {\n    grid-template-columns: 1fr min(${({ theme }) => theme.widths.main}, 100%) 1fr;\n  }\n`\n\nconst Wrapper = styled.div`\n  padding: 0 ${props => props.theme.spacing[5]};\n\n  h1 {\n    margin-top: 0;\n  }\n\n  > p {\n    margin-bottom: ${({ theme }) => theme.spacing[7]};\n  }\n`\n\nconst PostList = styled.ol`\n  list-style: none;\n`\n\nconst AllPosts = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMdx.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"모든 글 보기\" />\n      <Grid>\n        <Wrapper>\n          <h1>모든 글 보기</h1>\n          <p>\n            <Link to=\"/\">메인 페이지로 돌아가기</Link>\n          </p>\n          <PostList>\n            {posts.map(post => (\n              <PostListItem post={post} key={post.id} />\n            ))}\n          </PostList>\n        </Wrapper>\n      </Grid>\n    </Layout>\n  )\n}\n\nexport default AllPosts\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        id\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM D, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}