{"version":3,"sources":["webpack://website/./src/components/atoms/divider.js","webpack://website/./src/components/atoms/round-box.js","webpack://website/./src/components/organisms/post-list-item.js","webpack://website/./src/templates/tag-template.js"],"names":["Divider","theme","spacing","colors","accent","RoundBox","props","bg","bgHover","text","fontSizes","fontWeights","regular","black","post","title","frontmatter","tags","sort","key","fields","slug","itemScope","itemType","to","itemProp","description","excerpt","date","Grid","widths","main","aside","full","Wrapper","PostList","pageContext","data","location","siteTitle","site","siteMetadata","tag","allMdx","edges","tagHeader","totalCount","map","node"],"mappings":"0GAEMA,GAAO,E,QAAA,wCACD,qBAAGC,MAAkBC,QAAQ,KAD5B,kBAEG,qBAAGD,MAAkBE,OAAOC,SAF/B,yBAOb,O,sCCCMC,GAAQ,E,QAAA,iDACK,SAAAC,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KADlC,mBAEK,qBAAGD,MAAkBC,QAAQ,KAFlC,gBAIE,qBAAEK,KAJJ,sJAUI,qBAAGC,UAVP,iDAgBD,qBAAGP,MAAkBE,OAAOM,OAhB3B,qBAqBC,qBAAGR,MAAkBC,QAAQ,KArB9B,KAqBoC,qBAAGD,MAAkBC,QAAQ,KArBjE,uBAyBO,SAAAI,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KAzBpC,gBA0BI,SAAAI,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KA1BjC,eA2BG,SAAAI,GAAK,OAAIA,EAAML,MAAMS,UAAU,KA3BlC,iBA4BK,SAAAJ,GAAK,OAAIA,EAAML,MAAMU,YAAYC,UA5BtC,WA6BD,SAAAN,GAAK,OAAIA,EAAML,MAAME,OAAOU,QA7B3B,eAiCA,SAAAP,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KAjC7B,MAqCd,O,oFCdA,IA1BqB,SAAC,GAAc,IAAZY,EAAW,EAAXA,KAChBC,EAAQD,EAAKE,YAAYD,MACzBE,EAAOH,EAAKE,YAAYC,KAG9B,OAFIA,GAAMA,EAAKC,QAGb,eAAIC,IAAKL,EAAKM,OAAOC,OACnB,oBAASC,WAAS,EAACC,SAAS,8BAC1B,SAAC,IAAD,CAAUhB,GAAIN,wBACZ,SAAC,KAAD,CAAMuB,GAAIV,EAAKM,OAAOC,KAAMI,SAAS,QACnC,wBACE,oBACE,iBAAMA,SAAS,YAAYV,KAE7B,cAAGU,SAAS,eACTX,EAAKE,YAAYU,aAAeZ,EAAKa,SAEvCb,EAAKE,YAAYY,OAAQ,sBAAQd,EAAKE,YAAYY,a,2HCfjE,IAAMC,GAAI,kDACO,SAAAvB,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KADpC,gDAIyB,qBAAGD,MAAkB6B,OAAOC,OAJrD,YAIoE,qBACxE9B,MACU6B,OAAOE,QANb,8CAYa,qBAAG/B,MAAkB6B,OAAOG,OAZzC,oCAa2B,qBAAGhC,MAAkB6B,OAAOC,OAbvD,iBAgBJG,GAAO,gDACE,SAAA5B,GAAK,OAAIA,EAAML,MAAMC,QAAQ,KAD/B,sBAQPiC,GAAQ,2EAwDd,UApDa,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwB1B,QAAxB,QACV2B,EAAQN,EAARM,IACR,EAA8BL,EAAKM,OAA3BC,EAAR,EAAQA,MACFC,EAAS,IAAOH,EAAP,SADf,EAAeI,WACA,cAEf,OACE,SAAC,IAAD,CAAQR,SAAUA,EAAUvB,MAAOwB,IACjC,SAAC,IAAD,CAAKxB,MAAO2B,EAAKhB,YAAgBgB,EAAL,YAE5B,SAACb,EAAD,MACE,SAACK,EAAD,MACE,mBAAKW,IACL,mBACE,SAAC,KAAD,CAAMrB,GAAG,KAAT,kBAEF,SAAC,KAAD,CAAMA,GAAG,SAAT,aACA,SAAC,IAAD,OACA,SAACW,EAAD,KACGS,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OAAO,SAAC,IAAD,CAAclC,KAAMkC","file":"component---src-templates-tag-template-js-aa0620d96fb2918cb0f3.js","sourcesContent":["import styled from \"@emotion/styled\"\n\nconst Divider = styled.hr`\n  margin: ${({ theme }) => theme.spacing[7]} 0;\n  background: ${({ theme }) => theme.colors.accent};\n  height: 1px;\n  border: 0;\n`\n\nexport default Divider\n","import styled from \"@emotion/styled\"\n\n/**\n * generic box container.\n * used in \n * - post list item\n * - collection list item\n * - etc.\n */\n\nconst RoundBox = styled.div`\n  margin-bottom: ${props => props.theme.spacing[5]};\n  border-radius: ${({ theme }) => theme.spacing[3]};\n\n  background: ${({bg})=> bg};\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.4s, background 0.3s;\n\n  &:hover {\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    background: ${({ bgHover }) => bgHover};\n  }\n\n  a {\n    display: block;\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.text};\n  }\n\n  header {\n    /* margin-bottom: ${props => props.theme.spacing[4]}; */\n    padding: ${({ theme }) => theme.spacing[6]} ${({ theme }) => theme.spacing[7]};\n  }\n\n  h2 {\n    margin-bottom: ${props => props.theme.spacing[1]};\n    margin-top: ${props => props.theme.spacing[0]};\n    font-size: ${props => props.theme.fontSizes[3]};\n    font-weight: ${props => props.theme.fontWeights.regular};\n    color: ${props => props.theme.colors.black};\n  }\n\n  p {\n    margin: ${props => props.theme.spacing[0]};\n  }\n`\n\nexport default RoundBox","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n// import styled from \"@emotion/styled\"\n// import { css } from \"@emotion/react\"\nimport RoundBox from \"../atoms/round-box\"\nimport theme from \"../../styles/theme\"\n\nconst PostListItem = ({ post }) => {\n  const title = post.frontmatter.title\n  const tags = post.frontmatter.tags\n  if (tags) tags.sort()\n\n  return (\n    <li key={post.fields.slug}>\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <RoundBox bg={theme.colors.brightgray}>\n          <Link to={post.fields.slug} itemProp=\"url\">\n            <header>\n              <h2>\n                <span itemProp=\"headline\">{title}</span>\n              </h2>\n              <p itemProp=\"description\">\n                {post.frontmatter.description || post.excerpt}\n              </p>\n              {post.frontmatter.date && <small>{post.frontmatter.date}</small>}\n            </header>\n          </Link>\n        </RoundBox>\n      </article>\n    </li>\n  )\n}\n\nexport default PostListItem\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostListItem from \"../components/organisms/post-list-item\"\nimport Divider from \"../components/atoms/divider\"\n\nconst Grid = styled.div`\n  padding-top: ${props => props.theme.spacing[5]};\n  \n  display: grid;\n  grid-template-columns: 1fr min(${({ theme }) => theme.widths.main}, 100%) ${({\n      theme,\n    }) => theme.widths.aside} 1fr;\n\n  > * {\n    grid-column: 2;\n  }\n\n  @media (max-width: ${({ theme }) => theme.widths.full}) {\n    grid-template-columns: 1fr min(${({ theme }) => theme.widths.main}, 100%) 1fr;\n  }\n`\nconst Wrapper = styled.div`\n  padding: 0 ${props => props.theme.spacing[5]};\n\n  h1 {\n    margin-top: 0;\n  }\n`\n\nconst PostList = styled.ol`\n  list-style: none;\n`\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMdx\n  const tagHeader = `“${tag}” 태그로 ${totalCount}건이 검색되었습니다.`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={tag} description={`${tag} 검색 결과`} />\n\n      <Grid>\n        <Wrapper>\n          <h1>{tagHeader}</h1>\n          <p>\n            <Link to=\"/\">메인 페이지로 돌아가기</Link>\n          </p>\n          <Link to=\"/tags\">모든 태그 보기</Link>\n          <Divider />\n          <PostList>\n            {edges.map(({ node }) => {\n              return <PostListItem post={node} />\n            })}\n          </PostList>\n        </Wrapper>\n      </Grid>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            date(formatString: \"MMMM D, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}